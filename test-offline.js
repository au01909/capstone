#!/usr/bin/env node

/**
 * Offline Functionality Test Script
 * 
 * This script tests the offline AI services and local storage functionality
 * without requiring a full server setup.
 */

const fs = require('fs');
const path = require('path');

// Test configuration
const TEST_CONFIG = {
  audioFile: './test-audio.mp3', // Place a test audio file here
  personName: 'Test Person',
  userId: 'test-user-123'
};

async function testOfflineServices() {
  console.log('üß™ Testing Offline Dementia Care Services...\n');

  try {
    // Test 1: Check if offline AI service can be imported
    console.log('1Ô∏è‚É£ Testing Offline AI Service Import...');
    const offlineAiService = require('./server/services/offlineAiService');
    console.log('‚úÖ Offline AI Service imported successfully');

    // Test 2: Check if local storage service can be imported
    console.log('\n2Ô∏è‚É£ Testing Local Storage Service Import...');
    const localStorageService = require('./server/services/localStorageService');
    console.log('‚úÖ Local Storage Service imported successfully');

    // Test 3: Check if cleanup service can be imported
    console.log('\n3Ô∏è‚É£ Testing Cleanup Service Import...');
    const cleanupService = require('./server/services/cleanupService');
    console.log('‚úÖ Cleanup Service imported successfully');

    // Test 4: Test local storage initialization
    console.log('\n4Ô∏è‚É£ Testing Local Storage Initialization...');
    const storageStats = await localStorageService.getStorageStats(TEST_CONFIG.userId);
    console.log('‚úÖ Local Storage initialized successfully');
    console.log(`   Storage path: ${storageStats.storagePath}`);

    // Test 5: Test offline AI service initialization (if Ollama is available)
    console.log('\n5Ô∏è‚É£ Testing Offline AI Service Initialization...');
    try {
      await offlineAiService.initializeServices();
      console.log('‚úÖ Offline AI Service initialized successfully');
    } catch (error) {
      console.log('‚ö†Ô∏è  Offline AI Service initialization failed (Ollama may not be running)');
      console.log(`   Error: ${error.message}`);
    }

    // Test 6: Test conversation storage (mock data)
    console.log('\n6Ô∏è‚É£ Testing Conversation Storage...');
    const mockConversation = {
      _id: `test-conv-${Date.now()}`,
      userId: TEST_CONFIG.userId,
      personName: TEST_CONFIG.personName,
      audioPath: '/mock/path/audio.mp3',
      transcript: 'This is a test conversation transcript.',
      summary: 'Test conversation summary generated by offline AI.',
      keyTopics: ['testing', 'offline', 'ai'],
      emotions: [{ emotion: 'neutral', confidence: 0.8 }],
      sentiment: 'neutral',
      sentimentScore: 0.1,
      keywords: ['test', 'conversation', 'offline'],
      duration: 30,
      language: 'en',
      processingStatus: 'completed',
      metadata: {
        recordingDevice: 'test',
        audioQuality: 'high',
        backgroundNoise: 'low',
        speakerCount: 2
      }
    };

    await localStorageService.saveConversation(TEST_CONFIG.userId, mockConversation);
    console.log('‚úÖ Mock conversation saved successfully');

    // Test 7: Test conversation retrieval
    console.log('\n7Ô∏è‚É£ Testing Conversation Retrieval...');
    const conversations = await localStorageService.getConversations(TEST_CONFIG.userId);
    console.log(`‚úÖ Retrieved ${conversations.conversations.length} conversations`);
    
    if (conversations.conversations.length > 0) {
      const conversation = conversations.conversations[0];
      console.log(`   Latest conversation: ${conversation.personName} - ${conversation.summary.substring(0, 50)}...`);
    }

    // Test 8: Test cleanup service stats
    console.log('\n8Ô∏è‚É£ Testing Cleanup Service Stats...');
    const cleanupStats = await cleanupService.getCleanupStats();
    console.log(`‚úÖ Cleanup service stats retrieved`);
    console.log(`   Total users: ${cleanupStats.totalUsers}`);
    console.log(`   Retention period: ${cleanupStats.retentionMonths} months`);

    // Test 9: Test keyword extraction (offline)
    console.log('\n9Ô∏è‚É£ Testing Offline Keyword Extraction...');
    const testText = 'This is a test conversation about family, health, and daily activities.';
    const keywords = await offlineAiService.extractKeywords(testText);
    console.log(`‚úÖ Keywords extracted: ${keywords.join(', ')}`);

    // Test 10: Test emotion analysis (offline)
    console.log('\nüîü Testing Offline Emotion Analysis...');
    const emotions = await offlineAiService.analyzeEmotions(testText);
    console.log(`‚úÖ Emotions analyzed: ${emotions.overallSentiment}`);
    console.log(`   Detected emotions: ${emotions.emotions.map(e => e.emotion).join(', ')}`);

    console.log('\nüéâ All offline tests completed successfully!');
    console.log('\nüìã Summary:');
    console.log('   ‚úÖ All services can be imported');
    console.log('   ‚úÖ Local storage is working');
    console.log('   ‚úÖ Mock conversation saved and retrieved');
    console.log('   ‚úÖ Offline AI processing is functional');
    console.log('   ‚úÖ Cleanup service is operational');

    console.log('\nüöÄ Your offline setup is ready to use!');
    console.log('\nNext steps:');
    console.log('1. Start Ollama: ollama serve');
    console.log('2. Pull a model: ollama pull llama3.1:8b');
    console.log('3. Start the server: cd server && npm run dev');
    console.log('4. Start the client: cd client && npm run dev');

  } catch (error) {
    console.error('\n‚ùå Test failed:', error.message);
    console.error('\nüîß Troubleshooting:');
    console.error('1. Make sure you\'re running from the project root directory');
    console.error('2. Install dependencies: npm run install-all');
    console.error('3. Check that all required files exist');
    console.error('4. Verify Node.js version (18+ required)');
    
    process.exit(1);
  }
}

// Test audio file processing (if test file exists)
async function testAudioProcessing() {
  if (fs.existsSync(TEST_CONFIG.audioFile)) {
    console.log('\nüéµ Testing Audio Processing...');
    try {
      const offlineAiService = require('./server/services/offlineAiService');
      const audioBuffer = fs.readFileSync(TEST_CONFIG.audioFile);
      
      console.log('üìÅ Test audio file found, processing...');
      const result = await offlineAiService.processConversation(
        audioBuffer, 
        path.basename(TEST_CONFIG.audioFile), 
        TEST_CONFIG.personName
      );
      
      console.log('‚úÖ Audio processing completed!');
      console.log(`   Transcript: ${result.transcript.substring(0, 100)}...`);
      console.log(`   Summary: ${result.summary.substring(0, 100)}...`);
      console.log(`   Sentiment: ${result.sentiment} (${result.sentimentScore})`);
      console.log(`   Duration: ${result.duration} seconds`);
      
    } catch (error) {
      console.log('‚ö†Ô∏è  Audio processing test failed (this is expected without Ollama)');
      console.log(`   Error: ${error.message}`);
    }
  } else {
    console.log('\nüìÅ No test audio file found (./test-audio.mp3)');
    console.log('   To test audio processing, place an audio file at ./test-audio.mp3');
  }
}

// Run tests
async function main() {
  console.log('üß† Dementia Care - Offline Functionality Test\n');
  console.log('This script tests the offline AI services and local storage.');
  console.log('Make sure you\'re in the project root directory.\n');

  await testOfflineServices();
  await testAudioProcessing();
  
  console.log('\n‚ú® Testing complete!');
}

// Handle command line arguments
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  testOfflineServices,
  testAudioProcessing
};
